
// // Returns N most popular words with M minimal len
// func (statistics *Statistics) _MostPopularMap(minWordLen int, limit int) map[string]int {
// 	keys := make([]string, 0, len(statistics.Words))

// 	for key := range statistics.Words {
// 		keys = append(keys, key)
// 	}

// 	// Sorting only keys
// 	sort.SliceStable(keys, func(i, j int) bool {
// 		return statistics.Words[keys[i]] > statistics.Words[keys[j]]
// 	})

// 	mostPopular := make(map[string]int, limit)
// 	wordsFound := 0

// 	for _, k := range keys {
// 		if len(k) >= minWordLen {
// 			wordsFound++
// 			mostPopular[k] = statistics.Words[k]
// 		}

// 		if wordsFound == limit {
// 			return mostPopular
// 		}
// 	}

// 	return mostPopular
// }

// func _printMostPopular(mostPopular map[string]int) {
// 	keys := make([]string, 0, len(mostPopular))

// 	for key := range mostPopular {
// 		keys = append(keys, key)
// 	}

// 	sort.SliceStable(keys, func(i, j int) bool {
// 		return mostPopular[keys[i]] > mostPopular[keys[j]]
// 	})

// 	for _, k := range keys {
// 		fmt.Println(k, mostPopular[k])
// 	}
// }
